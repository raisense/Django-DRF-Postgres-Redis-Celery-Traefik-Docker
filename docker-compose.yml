version: "3"

services:
  traefik:
    image: traefik:v2.4
    container_name: traefik
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080
      # Make the router use this domain in HTTP
      - traefik.http.routers.traefik-dashboard-http.entrypoints=http
      - traefik.http.routers.traefik-dashboard-http.rule=Host(`traefik.${DOMAIN?Variable not set}`)
      # admin-auth middleware with HTTP Basic auth
      # Using environment variables TRAEFIK_DASHBOARD_USERNAME and TRAEFIK_DASHBOARD_HASHED_PASSWORD
      - traefik.http.middlewares.admin-auth.basicauth.users=${TRAFEIK_DASHBOARD_USERNAME?Variable not set}:${TRAEFIK_DASHBOARD_HASHED_PASSWORD?Variable not set}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-public-certificates:/certificates

  db:
    image: postgres:12.3
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - /var/lib/postgresql/data:/var/lib/postgresql/data

  redis:
    image: library/redis:5.0-alpine
    restart: unless-stopped
    volumes:
      - /var/lib/redis/data:/data

  app:
    build:
      context: .
      dockerfile: ./docker/app/Dockerfile
      args:
        USER_ID: ${UID:-1000}
        GROUP_ID: ${GID:-1000}
    image: ${APP_REPOSITORY}/${APP_IMAGE}:${APP_IMAGE_VERSION}
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - app-media:/app/media
      - app-static:/app/static
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.app.loadbalancer.server.port=8000
      # Make the router use this domain in HTTP
      - traefik.http.routers.app-http.entrypoints=http
      # backend subdomain is added in the case if you are intentionally using DOMAIN variable for your whole project
      - traefik.http.routers.app-http.rule=Host(`backend.${DOMAIN?Variable not set}`)
    depends_on:
      - db
      - redis

  celery-worker:
    image: ${APP_REPOSITORY}/${APP_IMAGE}:${APP_IMAGE_VERSION}
    env_file:
      - .env
    command: /bin/bash -c "celery -A app worker --app=app.celeryconf:app --loglevel ${CELERY_WORKER_LOGLEVEL} -P threads"
    restart: unless-stopped
    volumes:
      - app-media:/app/media
      - app-static:/app/static
    depends_on:
      - app

  celery-beat:
    image: ${APP_REPOSITORY}/${APP_IMAGE}:${APP_IMAGE_VERSION}
    env_file:
      - .env
    command: /bin/bash -c "celery -A app beat -s /app/celerybeat-schedule --app=app.celeryconf:app --pidfile= --loglevel ${CELERY_BEAT_LOGLEVEL}"
    restart: unless-stopped
    volumes:
      - app-media:/app/media
      - app-static:/app/static
    depends_on:
      - app

volumes:
  app-media:
  app-static:
  traefik-public-certificates:
